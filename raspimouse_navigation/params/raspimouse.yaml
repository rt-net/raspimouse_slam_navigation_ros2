amcl:
  ros__parameters:
    # Reduced the noise level from the default value
    # Increased rotational noise to compensate for odometry drift
    alpha1: 0.1
    alpha2: 0.1
    alpha3: 0.01
    alpha4: 0.01
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: -1.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    # Reduced update distance and angle to match Raspberry Pi Mouse
    update_min_a: 0.02
    update_min_d: 0.05
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    # Set a tentative initial position and orientation
    set_initial_pose: True
    initial_pose:
      x: 0.0
      y: 0.0
      z: 0.0
      yaw: 0.0

bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    #default_nav_to_pose_bt_xml: "$(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    #default_nav_through_poses_bt_xml: "$(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"

controller_server:
  ros__parameters:
    enable_stamped_cmd_vel: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001

    # Added plugin for goal checking
    goal_checker_plugins: ["goal_checker"]
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05
      yaw_goal_tolerance: 0.5
      stateful: True

    controller_plugins: ["FollowPath"]
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      # Adjusted driving speed to match the Raspberry Pi Mouse's specifications
      min_vel_x: -0.1
      min_vel_y: 0.0
      max_vel_x: 0.1
      max_vel_y: 0.0
      max_vel_theta: 2.0
      min_speed_xy: 0.0
      max_speed_xy: 0.2
      min_speed_theta: 0.0
      acc_lim_x: 2.0
      acc_lim_y: 0.0
      acc_lim_theta: 4.0
      decel_lim_x: -2.0
      decel_lim_y: 0.0
      decel_lim_theta: -4.0

      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics:
        [
          "RotateToGoal",
          "Oscillation",
          "BaseObstacle",
          "GoalAlign",
          "PathAlign",
          "PathDist",
          "GoalDist",
        ]
      BaseObstacle:
        scale: 0.02 # critic weight
      PathAlign:
        forward_point_distance: 0.1
        scale: 10.0 # critic weight
      GoalAlign:
        forward_point_distance: 0.1
        scale: 10.0 # critic weight
      PathDist:
        scale: 32.0 # critic weight
      GoalDist:
        scale: 24.0 # ccritic weight
      RotateToGoal:
        xy_goal_tolerance: 0.01 # meters
        trans_stopped_velocity: 0.25 # rad/sec
        slowing_factor: 20.0
        lookahead_time: -1.0
        scale: 32.0 # critic weight

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      # Reduced costmap size to fit the Raspberry Pi Mouse
      width: 1 # meters
      height: 1 # meters
      # Set resolution to the same as SLAM parameters
      resolution: 0.01
      footprint: "[ [0.06, 0.05], [0.06, -0.05], [-0.15, -0.05], [-0.15, 0.05] ]"
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0
        inflation_radius: 0.5
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      footprint: "[ [0.06, 0.05], [0.06, -0.05], [-0.15, -0.05], [-0.15, 0.05] ]"
      # Set resolution to the same as SLAM parameters
      resolution: 0.01
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        # Remove obstacles overlapping the footprint
        footprint_clearing_enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          max_obstacle_height: 2.0
          clearing: True
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          marking: True
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0
        inflation_radius: 0.5
      always_send_full_costmap: True

velocity_smoother:
  ros__parameters:
    enable_stamped_cmd_vel: True

behavior_server:
  ros__parameters:
    enable_stamped_cmd_vel: True

collision_monitor:
  ros__parameters:
    enable_stamped_cmd_vel: True
    transform_tolerance: 0.1
    source_timeout: 5.0
    stop_pub_timeout: 2.0
    base_shift_correction: False
    polygons: ["DummyPolygon"]
    DummyPolygon:
      type: "circle"
      radius: 0.0  # valid range of dummy
      action_type: "none"  # No action taken.
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "/scan"

docking_server:
  ros__parameters:
    enable_stamped_cmd_vel: True
    dock_plugins: ["nova_carter_dock"]
    nova_carter_dock:
      plugin: "opennav_docking::SimpleChargingDock"

map_server:
  ros__parameters:
    yaml_filename: "test.yaml"

map_saver:
  ros__parameters:
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
